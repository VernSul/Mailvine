{"ast":null,"code":"var _jsxFileName = \"/home/victor/Documents/dadTools/emailFinder/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 6\n  },\n  __self: this\n}), document.getElementById('root')); // Client ID and API key from the Developer Console\n\nvar CLIENT_ID = '\"943454318334-aqnsss2jsnm0s1utqfc4djtsvsv0al7i.apps.googleusercontent.com';\nvar API_KEY = '<YOUR_API_KEY>'; // Array of API discovery doc URLs for APIs used by the quickstart\n\nvar DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/gmail/v1/rest\"]; // Authorization scopes required by the API; multiple scopes can be\n// included, separated by spaces.\n\nvar SCOPES = 'https://www.googleapis.com/auth/gmail.readonly';\n\nfunction handleClientLoad() {\n  gapi.load('client:auth2', initClient);\n}\n\nfunction initClient() {\n  gapi.client.init({\n    apiKey: API_KEY,\n    clientId: CLIENT_ID,\n    discoveryDocs: DISCOVERY_DOCS,\n    scope: SCOPES\n  }).then(function () {\n    // Listen for sign-in state changes.\n    gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus); // Handle the initial sign-in state.\n\n    updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\n    authorizeButton.onclick = handleAuthClick;\n    signoutButton.onclick = handleSignoutClick;\n  }, function (error) {\n    appendPre(JSON.stringify(error, null, 2));\n  });\n}","map":{"version":3,"sources":["/home/victor/Documents/dadTools/emailFinder/src/index.js"],"names":["React","ReactDOM","App","render","document","getElementById","CLIENT_ID","API_KEY","DISCOVERY_DOCS","SCOPES","handleClientLoad","gapi","load","initClient","client","init","apiKey","clientId","discoveryDocs","scope","then","auth2","getAuthInstance","isSignedIn","listen","updateSigninStatus","get","authorizeButton","onclick","handleAuthClick","signoutButton","handleSignoutClick","error","appendPre","JSON","stringify"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AAGAD,QAAQ,CAACE,MAAT,CAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAwBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAxB,E,CAEC;;AACA,IAAIC,SAAS,GAAG,2EAAhB;AACA,IAAIC,OAAO,GAAG,gBAAd,C,CAEA;;AACA,IAAIC,cAAc,GAAG,CAAC,4DAAD,CAArB,C,CAEA;AACA;;AACA,IAAIC,MAAM,GAAG,gDAAb;;AAID,SAASC,gBAAT,GAA4B;AACxBC,EAAAA,IAAI,CAACC,IAAL,CAAU,cAAV,EAA0BC,UAA1B;AACD;;AAEH,SAASA,UAAT,GAAsB;AAClBF,EAAAA,IAAI,CAACG,MAAL,CAAYC,IAAZ,CAAiB;AACfC,IAAAA,MAAM,EAAET,OADO;AAEfU,IAAAA,QAAQ,EAAEX,SAFK;AAGfY,IAAAA,aAAa,EAAEV,cAHA;AAIfW,IAAAA,KAAK,EAAEV;AAJQ,GAAjB,EAKGW,IALH,CAKQ,YAAY;AAClB;AACAT,IAAAA,IAAI,CAACU,KAAL,CAAWC,eAAX,GAA6BC,UAA7B,CAAwCC,MAAxC,CAA+CC,kBAA/C,EAFkB,CAIlB;;AACAA,IAAAA,kBAAkB,CAACd,IAAI,CAACU,KAAL,CAAWC,eAAX,GAA6BC,UAA7B,CAAwCG,GAAxC,EAAD,CAAlB;AACAC,IAAAA,eAAe,CAACC,OAAhB,GAA0BC,eAA1B;AACAC,IAAAA,aAAa,CAACF,OAAd,GAAwBG,kBAAxB;AACD,GAbD,EAaG,UAASC,KAAT,EAAgB;AACjBC,IAAAA,SAAS,CAACC,IAAI,CAACC,SAAL,CAAeH,KAAf,EAAsB,IAAtB,EAA4B,CAA5B,CAAD,CAAT;AACD,GAfD;AAgBD","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n // Client ID and API key from the Developer Console\n var CLIENT_ID = '\"943454318334-aqnsss2jsnm0s1utqfc4djtsvsv0al7i.apps.googleusercontent.com';\n var API_KEY = '<YOUR_API_KEY>';\n\n // Array of API discovery doc URLs for APIs used by the quickstart\n var DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/gmail/v1/rest\"];\n\n // Authorization scopes required by the API; multiple scopes can be\n // included, separated by spaces.\n var SCOPES = 'https://www.googleapis.com/auth/gmail.readonly';\n\n\n\nfunction handleClientLoad() {\n    gapi.load('client:auth2', initClient);\n  }\n\nfunction initClient() {\n    gapi.client.init({\n      apiKey: API_KEY,\n      clientId: CLIENT_ID,\n      discoveryDocs: DISCOVERY_DOCS,\n      scope: SCOPES\n    }).then(function () {\n      // Listen for sign-in state changes.\n      gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);\n\n      // Handle the initial sign-in state.\n      updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\n      authorizeButton.onclick = handleAuthClick;\n      signoutButton.onclick = handleSignoutClick;\n    }, function(error) {\n      appendPre(JSON.stringify(error, null, 2));\n    });\n  }\n"]},"metadata":{},"sourceType":"module"}