{"ast":null,"code":"import _classCallCheck from \"/home/victor/Documents/dadTools/emailFinder/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\nvar gmailAPI = function gmailAPI(apiKey, clientId) {\n  var _this = this;\n\n  _classCallCheck(this, gmailAPI);\n\n  this.initClient = function () {\n    var authorizeButton = document.getElementById('authorize_button');\n    var signoutButton = document.getElementById('signout_button');\n    console.log(window.gapi);\n    window.gapi.client.init({\n      apiKey: _this.API_KEY,\n      clientId: _this.CLIENT_ID,\n      discoveryDocs: _this.DISCOVERY_DOCS,\n      scope: _this.SCOPES\n    }).then(function () {\n      console.log(window.gapi);\n      console.log(window.gapi.auth2.getAuthInstance().isSignedIn); // this.gapi = gapi\n      // Listen for sign-in state changes.\n      //   gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);\n      //   // Handle the initial sign-in state.\n\n      updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\n      authorizeButton.onclick = handleAuthClick;\n      signoutButton.onclick = handleSignoutClick;\n    }, function (error) {//   appendPre(JSON.stringify(error, null, 2));\n    });\n    _this.gapi = window.gapi;\n    console.log(window.gapi.auth2.getAuthInstance().isSignedIn);\n  };\n\n  this.handleAuthClick = function (event) {\n    _this.gapi.auth2.getAuthInstance().signIn();\n  };\n\n  this.handleSignoutClick = function (event) {\n    _this.gapi.auth2.getAuthInstance().signOut();\n  };\n\n  this.appendPre = function (message) {\n    var pre = document.getElementById('content');\n    var textContent = document.createTextNode(message + '\\n');\n    pre.appendChild(textContent);\n  };\n\n  this.listLabels = function () {\n    _this.gapi.client.gmail.users.labels.list({\n      'userId': 'me'\n    }).then(function (response) {\n      var labels = response.result.labels;\n      this.appendPre('Labels:');\n\n      if (labels && labels.length > 0) {\n        for (var i = 0; i < labels.length; i++) {\n          var label = labels[i];\n          this.appendPre(label.name);\n        }\n      } else {\n        this.appendPre('No Labels found.');\n      }\n    });\n  };\n\n  this.CLIENT_ID = clientId;\n  this.API_KEY = apiKey; // Array of API discovery doc URLs for APIs used by the quickstart\n\n  this.DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/gmail/v1/rest\"]; // Authorization scopes required by the API; multiple scopes can be\n  // included, separated by spaces.\n\n  this.SCOPES = 'https://www.googleapis.com/auth/gmail.readonly';\n  this.gapi = window.gapi;\n};\n\nexport default gmailAPI;","map":{"version":3,"sources":["/home/victor/Documents/dadTools/emailFinder/src/google.js"],"names":["gmailAPI","apiKey","clientId","initClient","authorizeButton","document","getElementById","signoutButton","console","log","window","gapi","client","init","API_KEY","CLIENT_ID","discoveryDocs","DISCOVERY_DOCS","scope","SCOPES","then","auth2","getAuthInstance","isSignedIn","updateSigninStatus","get","onclick","handleAuthClick","handleSignoutClick","error","event","signIn","signOut","appendPre","message","pre","textContent","createTextNode","appendChild","listLabels","gmail","users","labels","list","response","result","length","i","label","name"],"mappings":"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","sourcesContent":["class gmailAPI {\n    constructor(apiKey, clientId) {\n        this.CLIENT_ID = clientId;\n        this.API_KEY = apiKey;\n       \n        // Array of API discovery doc URLs for APIs used by the quickstart\n        this.DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/gmail/v1/rest\"];\n       \n        // Authorization scopes required by the API; multiple scopes can be\n        // included, separated by spaces.\n        this.SCOPES = 'https://www.googleapis.com/auth/gmail.readonly';\n        this.gapi =  window.gapi\n\n        \n\n    }\n    initClient = () => {\n        var authorizeButton = document.getElementById('authorize_button');\n        var signoutButton = document.getElementById('signout_button');\n        console.log(window.gapi)\n        window.gapi.client.init({\n          apiKey: this.API_KEY,\n          clientId: this.CLIENT_ID,\n          discoveryDocs: this.DISCOVERY_DOCS,\n          scope: this.SCOPES\n        }).then(() => {\n            console.log(window.gapi)\n            console.log(window.gapi.auth2.getAuthInstance().isSignedIn)\n            // this.gapi = gapi\n          // Listen for sign-in state changes.\n        //   gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);\n\n        //   // Handle the initial sign-in state.\n          updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\n          authorizeButton.onclick = handleAuthClick;\n          signoutButton.onclick = handleSignoutClick;\n        }, function(error) {\n        //   appendPre(JSON.stringify(error, null, 2));\n        });\n\n        this.gapi = window.gapi;\n        console.log(window.gapi.auth2.getAuthInstance().isSignedIn)\n      }\n\n      /**\n       *  Called when the signed in status changes, to update the UI\n       *  appropriately. After a sign-in, the API is called.\n       */\n    //   updateSigninStatus(isSignedIn) {\n    //     if (isSignedIn) {\n    //       authorizeButton.style.display = 'none';\n    //       signoutButton.style.display = 'block';\n    //       listLabels();\n    //     } else {\n    //       authorizeButton.style.display = 'block';\n    //       signoutButton.style.display = 'none';\n    //     }\n    //   }\n\n      /**\n       *  Sign in the user upon button click.\n       */\n      handleAuthClick = (event) => {\n        this.gapi.auth2.getAuthInstance().signIn();\n      }\n\n      /**\n       *  Sign out the user upon button click.\n       */\n      handleSignoutClick = (event) => {\n        this.gapi.auth2.getAuthInstance().signOut();\n      }\n\n      /**\n       * Append a pre element to the body containing the given message\n       * as its text node. Used to display the results of the API call.\n       *\n       * @param {string} message Text to be placed in pre element.\n       */\n      appendPre = (message) => {\n        var pre = document.getElementById('content');\n        var textContent = document.createTextNode(message + '\\n');\n        pre.appendChild(textContent);\n      }\n\n      /**\n       * Print all Labels in the authorized user's inbox. If no labels\n       * are found an appropriate message is printed.\n       */\n      listLabels = () => {\n        this.gapi.client.gmail.users.labels.list({\n          'userId': 'me'\n        }).then(function(response) {\n          var labels = response.result.labels;\n          this.appendPre('Labels:');\n\n          if (labels && labels.length > 0) {\n            for (let i = 0; i < labels.length; i++) {\n              var label = labels[i];\n              this.appendPre(label.name)\n            }\n          } else {\n            this.appendPre('No Labels found.');\n          }\n        });\n      }\n}\n\nexport default gmailAPI;\n\n    "]},"metadata":{},"sourceType":"module"}