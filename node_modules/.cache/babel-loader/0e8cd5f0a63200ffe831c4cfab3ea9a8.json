{"ast":null,"code":"import _classCallCheck from \"/home/victor/Documents/dadTools/emailFinder/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/victor/Documents/dadTools/emailFinder/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar gmailAPI =\n/*#__PURE__*/\nfunction () {\n  function gmailAPI(apiKey, clientId) {\n    _classCallCheck(this, gmailAPI);\n\n    this.CLIENT_ID = apiKey;\n    this.API_KEY = clientId; // Array of API discovery doc URLs for APIs used by the quickstart\n\n    this.DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/gmail/v1/rest\"]; // Authorization scopes required by the API; multiple scopes can be\n    // included, separated by spaces.\n\n    this.SCOPES = 'https://www.googleapis.com/auth/gmail.readonly';\n    this.gapi = window.gapi.load('client:auth2', this.initClient);\n  }\n\n  _createClass(gmailAPI, [{\n    key: \"initClient\",\n    value: function initClient() {\n      this.gapi.client.init({\n        apiKey: this.API_KEY,\n        clientId: this.CLIENT_ID,\n        discoveryDocs: this.DISCOVERY_DOCS,\n        scope: this.SCOPES\n      }).then(function () {\n        this.gapi = gapi; // Listen for sign-in state changes.\n        //   gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);\n        //   // Handle the initial sign-in state.\n        //   updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\n        //   authorizeButton.onclick = handleAuthClick;\n        //   signoutButton.onclick = handleSignoutClick;\n      }, function (error) {\n        appendPre(JSON.stringify(error, null, 2));\n      });\n    }\n    /**\n     *  Called when the signed in status changes, to update the UI\n     *  appropriately. After a sign-in, the API is called.\n     */\n\n  }, {\n    key: \"updateSigninStatus\",\n    value: function updateSigninStatus(isSignedIn) {\n      if (isSignedIn) {\n        authorizeButton.style.display = 'none';\n        signoutButton.style.display = 'block';\n        listLabels();\n      } else {\n        authorizeButton.style.display = 'block';\n        signoutButton.style.display = 'none';\n      }\n    }\n    /**\n     *  Sign in the user upon button click.\n     */\n\n  }, {\n    key: \"handleAuthClick\",\n    value: function handleAuthClick(event) {\n      gapi.auth2.getAuthInstance().signIn();\n    }\n    /**\n     *  Sign out the user upon button click.\n     */\n\n  }, {\n    key: \"handleSignoutClick\",\n    value: function handleSignoutClick(event) {\n      gapi.auth2.getAuthInstance().signOut();\n    }\n    /**\n     * Append a pre element to the body containing the given message\n     * as its text node. Used to display the results of the API call.\n     *\n     * @param {string} message Text to be placed in pre element.\n     */\n\n  }, {\n    key: \"appendPre\",\n    value: function appendPre(message) {\n      var pre = document.getElementById('content');\n      var textContent = document.createTextNode(message + '\\n');\n      pre.appendChild(textContent);\n    }\n    /**\n     * Print all Labels in the authorized user's inbox. If no labels\n     * are found an appropriate message is printed.\n     */\n\n  }, {\n    key: \"listLabels\",\n    value: function listLabels() {\n      gapi.client.gmail.users.labels.list({\n        'userId': 'me'\n      }).then(function (response) {\n        var labels = response.result.labels;\n        appendPre('Labels:');\n\n        if (labels && labels.length > 0) {\n          for (i = 0; i < labels.length; i++) {\n            var label = labels[i];\n            appendPre(label.name);\n          }\n        } else {\n          appendPre('No Labels found.');\n        }\n      });\n    }\n  }]);\n\n  return gmailAPI;\n}();\n\nexport default gmailAPI;","map":{"version":3,"sources":["/home/victor/Documents/dadTools/emailFinder/src/google.js"],"names":["gmailAPI","apiKey","clientId","CLIENT_ID","API_KEY","DISCOVERY_DOCS","SCOPES","gapi","window","load","initClient","client","init","discoveryDocs","scope","then","error","appendPre","JSON","stringify","isSignedIn","authorizeButton","style","display","signoutButton","listLabels","event","auth2","getAuthInstance","signIn","signOut","message","pre","document","getElementById","textContent","createTextNode","appendChild","gmail","users","labels","list","response","result","length","i","label","name"],"mappings":";;;IAAMA,Q;;;AACF,oBAAYC,MAAZ,EAAoBC,QAApB,EAA8B;AAAA;;AAC1B,SAAKC,SAAL,GAAiBF,MAAjB;AACA,SAAKG,OAAL,GAAeF,QAAf,CAF0B,CAI1B;;AACA,SAAKG,cAAL,GAAsB,CAAC,4DAAD,CAAtB,CAL0B,CAO1B;AACA;;AACA,SAAKC,MAAL,GAAc,gDAAd;AACA,SAAKC,IAAL,GAAaC,MAAM,CAACD,IAAP,CAAYE,IAAZ,CAAiB,cAAjB,EAAiC,KAAKC,UAAtC,CAAb;AAEH;;;;iCACY;AACT,WAAKH,IAAL,CAAUI,MAAV,CAAiBC,IAAjB,CAAsB;AACpBX,QAAAA,MAAM,EAAE,KAAKG,OADO;AAEpBF,QAAAA,QAAQ,EAAE,KAAKC,SAFK;AAGpBU,QAAAA,aAAa,EAAE,KAAKR,cAHA;AAIpBS,QAAAA,KAAK,EAAE,KAAKR;AAJQ,OAAtB,EAKGS,IALH,CAKQ,YAAY;AAChB,aAAKR,IAAL,GAAYA,IAAZ,CADgB,CAElB;AACF;AAEA;AACA;AACA;AACA;AACC,OAdD,EAcG,UAASS,KAAT,EAAgB;AACjBC,QAAAA,SAAS,CAACC,IAAI,CAACC,SAAL,CAAeH,KAAf,EAAsB,IAAtB,EAA4B,CAA5B,CAAD,CAAT;AACD,OAhBD;AAiBD;AAED;;;;;;;uCAImBI,U,EAAY;AAC7B,UAAIA,UAAJ,EAAgB;AACdC,QAAAA,eAAe,CAACC,KAAhB,CAAsBC,OAAtB,GAAgC,MAAhC;AACAC,QAAAA,aAAa,CAACF,KAAd,CAAoBC,OAApB,GAA8B,OAA9B;AACAE,QAAAA,UAAU;AACX,OAJD,MAIO;AACLJ,QAAAA,eAAe,CAACC,KAAhB,CAAsBC,OAAtB,GAAgC,OAAhC;AACAC,QAAAA,aAAa,CAACF,KAAd,CAAoBC,OAApB,GAA8B,MAA9B;AACD;AACF;AAED;;;;;;oCAGgBG,K,EAAO;AACrBnB,MAAAA,IAAI,CAACoB,KAAL,CAAWC,eAAX,GAA6BC,MAA7B;AACD;AAED;;;;;;uCAGmBH,K,EAAO;AACxBnB,MAAAA,IAAI,CAACoB,KAAL,CAAWC,eAAX,GAA6BE,OAA7B;AACD;AAED;;;;;;;;;8BAMUC,O,EAAS;AACjB,UAAIC,GAAG,GAAGC,QAAQ,CAACC,cAAT,CAAwB,SAAxB,CAAV;AACA,UAAIC,WAAW,GAAGF,QAAQ,CAACG,cAAT,CAAwBL,OAAO,GAAG,IAAlC,CAAlB;AACAC,MAAAA,GAAG,CAACK,WAAJ,CAAgBF,WAAhB;AACD;AAED;;;;;;;iCAIa;AACX5B,MAAAA,IAAI,CAACI,MAAL,CAAY2B,KAAZ,CAAkBC,KAAlB,CAAwBC,MAAxB,CAA+BC,IAA/B,CAAoC;AAClC,kBAAU;AADwB,OAApC,EAEG1B,IAFH,CAEQ,UAAS2B,QAAT,EAAmB;AACzB,YAAIF,MAAM,GAAGE,QAAQ,CAACC,MAAT,CAAgBH,MAA7B;AACAvB,QAAAA,SAAS,CAAC,SAAD,CAAT;;AAEA,YAAIuB,MAAM,IAAIA,MAAM,CAACI,MAAP,GAAgB,CAA9B,EAAiC;AAC/B,eAAKC,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGL,MAAM,CAACI,MAAvB,EAA+BC,CAAC,EAAhC,EAAoC;AAClC,gBAAIC,KAAK,GAAGN,MAAM,CAACK,CAAD,CAAlB;AACA5B,YAAAA,SAAS,CAAC6B,KAAK,CAACC,IAAP,CAAT;AACD;AACF,SALD,MAKO;AACL9B,UAAAA,SAAS,CAAC,kBAAD,CAAT;AACD;AACF,OAdD;AAeD;;;;;;AAGP,eAAejB,QAAf","sourcesContent":["class gmailAPI {\n    constructor(apiKey, clientId) {\n        this.CLIENT_ID = apiKey;\n        this.API_KEY = clientId;\n       \n        // Array of API discovery doc URLs for APIs used by the quickstart\n        this.DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/gmail/v1/rest\"];\n       \n        // Authorization scopes required by the API; multiple scopes can be\n        // included, separated by spaces.\n        this.SCOPES = 'https://www.googleapis.com/auth/gmail.readonly';\n        this.gapi =  window.gapi.load('client:auth2', this.initClient);\n\n    }\n    initClient() {\n        this.gapi.client.init({\n          apiKey: this.API_KEY,\n          clientId: this.CLIENT_ID,\n          discoveryDocs: this.DISCOVERY_DOCS,\n          scope: this.SCOPES\n        }).then(function () {\n            this.gapi = gapi\n          // Listen for sign-in state changes.\n        //   gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);\n\n        //   // Handle the initial sign-in state.\n        //   updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\n        //   authorizeButton.onclick = handleAuthClick;\n        //   signoutButton.onclick = handleSignoutClick;\n        }, function(error) {\n          appendPre(JSON.stringify(error, null, 2));\n        });\n      }\n\n      /**\n       *  Called when the signed in status changes, to update the UI\n       *  appropriately. After a sign-in, the API is called.\n       */\n      updateSigninStatus(isSignedIn) {\n        if (isSignedIn) {\n          authorizeButton.style.display = 'none';\n          signoutButton.style.display = 'block';\n          listLabels();\n        } else {\n          authorizeButton.style.display = 'block';\n          signoutButton.style.display = 'none';\n        }\n      }\n\n      /**\n       *  Sign in the user upon button click.\n       */\n      handleAuthClick(event) {\n        gapi.auth2.getAuthInstance().signIn();\n      }\n\n      /**\n       *  Sign out the user upon button click.\n       */\n      handleSignoutClick(event) {\n        gapi.auth2.getAuthInstance().signOut();\n      }\n\n      /**\n       * Append a pre element to the body containing the given message\n       * as its text node. Used to display the results of the API call.\n       *\n       * @param {string} message Text to be placed in pre element.\n       */\n      appendPre(message) {\n        var pre = document.getElementById('content');\n        var textContent = document.createTextNode(message + '\\n');\n        pre.appendChild(textContent);\n      }\n\n      /**\n       * Print all Labels in the authorized user's inbox. If no labels\n       * are found an appropriate message is printed.\n       */\n      listLabels() {\n        gapi.client.gmail.users.labels.list({\n          'userId': 'me'\n        }).then(function(response) {\n          var labels = response.result.labels;\n          appendPre('Labels:');\n\n          if (labels && labels.length > 0) {\n            for (i = 0; i < labels.length; i++) {\n              var label = labels[i];\n              appendPre(label.name)\n            }\n          } else {\n            appendPre('No Labels found.');\n          }\n        });\n      }\n}\n\nexport default gmailAPI;\n\n    "]},"metadata":{},"sourceType":"module"}