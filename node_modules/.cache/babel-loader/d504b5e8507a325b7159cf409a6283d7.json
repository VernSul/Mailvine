{"ast":null,"code":"import _classCallCheck from \"/home/victor/Documents/dadTools/emailFinder/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/victor/Documents/dadTools/emailFinder/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar gmailAPI =\n/*#__PURE__*/\nfunction () {\n  function gmailAPI(apiKey, clientId) {\n    var _this = this;\n\n    _classCallCheck(this, gmailAPI);\n\n    this.initClient = function () {\n      var authorizeButton = document.getElementById('authorize_button');\n      var signoutButton = document.getElementById('signout_button');\n      console.log(window.gapi);\n      window.gapi.client.init({\n        apiKey: _this.API_KEY,\n        clientId: _this.CLIENT_ID,\n        discoveryDocs: _this.DISCOVERY_DOCS,\n        scope: _this.SCOPES\n      });\n      _this.gapi = window.gapi;\n      console.log(window.gapi.auth2.getAuthInstance().isSignedIn);\n    };\n\n    this.handleAuthClick = function (event) {\n      _this.gapi.auth2.getAuthInstance().signIn();\n    };\n\n    this.handleSignoutClick = function (event) {\n      _this.gapi.auth2.getAuthInstance().signOut();\n    };\n\n    this.appendPre = function (message) {\n      var pre = document.getElementById('content');\n      var textContent = document.createTextNode(message + '\\n');\n      pre.appendChild(textContent);\n    };\n\n    this.listLabels = function () {\n      _this.gapi.client.gmail.users.labels.list({\n        'userId': 'me'\n      }).then(function (response) {\n        var labels = response.result.labels;\n        this.appendPre('Labels:');\n\n        if (labels && labels.length > 0) {\n          for (var i = 0; i < labels.length; i++) {\n            var label = labels[i];\n            this.appendPre(label.name);\n          }\n        } else {\n          this.appendPre('No Labels found.');\n        }\n      });\n    };\n\n    this.CLIENT_ID = clientId;\n    this.API_KEY = apiKey; // Array of API discovery doc URLs for APIs used by the quickstart\n\n    this.DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/gmail/v1/rest\"]; // Authorization scopes required by the API; multiple scopes can be\n    // included, separated by spaces.\n\n    this.SCOPES = 'https://www.googleapis.com/auth/gmail.readonly';\n    this.gapi = window.gapi;\n  }\n\n  _createClass(gmailAPI, [{\n    key: \"updateSigninStatus\",\n\n    /**\n     *  Called when the signed in status changes, to update the UI\n     *  appropriately. After a sign-in, the API is called.\n     */\n    value: function updateSigninStatus(isSignedIn) {\n      if (isSignedIn) {\n        authorizeButton.style.display = 'none';\n        signoutButton.style.display = 'block';\n        listLabels();\n      } else {\n        authorizeButton.style.display = 'block';\n        signoutButton.style.display = 'none';\n      }\n    }\n    /**\n     *  Sign in the user upon button click.\n     */\n\n  }]);\n\n  return gmailAPI;\n}();\n\nexport default gmailAPI;","map":{"version":3,"sources":["/home/victor/Documents/dadTools/emailFinder/src/google.js"],"names":["gmailAPI","apiKey","clientId","initClient","authorizeButton","document","getElementById","signoutButton","console","log","window","gapi","client","init","API_KEY","CLIENT_ID","discoveryDocs","DISCOVERY_DOCS","scope","SCOPES","auth2","getAuthInstance","isSignedIn","handleAuthClick","event","signIn","handleSignoutClick","signOut","appendPre","message","pre","textContent","createTextNode","appendChild","listLabels","gmail","users","labels","list","then","response","result","length","i","label","name","style","display"],"mappings":";;;IAAMA,Q;;;AACF,oBAAYC,MAAZ,EAAoBC,QAApB,EAA8B;AAAA;;AAAA;;AAAA,SAe9BC,UAf8B,GAejB,YAAM;AACf,UAAIC,eAAe,GAAGC,QAAQ,CAACC,cAAT,CAAwB,kBAAxB,CAAtB;AACA,UAAIC,aAAa,GAAGF,QAAQ,CAACC,cAAT,CAAwB,gBAAxB,CAApB;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACC,IAAnB;AACAD,MAAAA,MAAM,CAACC,IAAP,CAAYC,MAAZ,CAAmBC,IAAnB,CAAwB;AACtBZ,QAAAA,MAAM,EAAE,KAAI,CAACa,OADS;AAEtBZ,QAAAA,QAAQ,EAAE,KAAI,CAACa,SAFO;AAGtBC,QAAAA,aAAa,EAAE,KAAI,CAACC,cAHE;AAItBC,QAAAA,KAAK,EAAE,KAAI,CAACC;AAJU,OAAxB;AAOA,MAAA,KAAI,CAACR,IAAL,GAAYD,MAAM,CAACC,IAAnB;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACC,IAAP,CAAYS,KAAZ,CAAkBC,eAAlB,GAAoCC,UAAhD;AACD,KA5B2B;;AAAA,SAgD5BC,eAhD4B,GAgDV,UAACC,KAAD,EAAW;AAC3B,MAAA,KAAI,CAACb,IAAL,CAAUS,KAAV,CAAgBC,eAAhB,GAAkCI,MAAlC;AACD,KAlD2B;;AAAA,SAuD5BC,kBAvD4B,GAuDP,UAACF,KAAD,EAAW;AAC9B,MAAA,KAAI,CAACb,IAAL,CAAUS,KAAV,CAAgBC,eAAhB,GAAkCM,OAAlC;AACD,KAzD2B;;AAAA,SAiE5BC,SAjE4B,GAiEhB,UAACC,OAAD,EAAa;AACvB,UAAIC,GAAG,GAAGzB,QAAQ,CAACC,cAAT,CAAwB,SAAxB,CAAV;AACA,UAAIyB,WAAW,GAAG1B,QAAQ,CAAC2B,cAAT,CAAwBH,OAAO,GAAG,IAAlC,CAAlB;AACAC,MAAAA,GAAG,CAACG,WAAJ,CAAgBF,WAAhB;AACD,KArE2B;;AAAA,SA2E5BG,UA3E4B,GA2Ef,YAAM;AACjB,MAAA,KAAI,CAACvB,IAAL,CAAUC,MAAV,CAAiBuB,KAAjB,CAAuBC,KAAvB,CAA6BC,MAA7B,CAAoCC,IAApC,CAAyC;AACvC,kBAAU;AAD6B,OAAzC,EAEGC,IAFH,CAEQ,UAASC,QAAT,EAAmB;AACzB,YAAIH,MAAM,GAAGG,QAAQ,CAACC,MAAT,CAAgBJ,MAA7B;AACA,aAAKT,SAAL,CAAe,SAAf;;AAEA,YAAIS,MAAM,IAAIA,MAAM,CAACK,MAAP,GAAgB,CAA9B,EAAiC;AAC/B,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,MAAM,CAACK,MAA3B,EAAmCC,CAAC,EAApC,EAAwC;AACtC,gBAAIC,KAAK,GAAGP,MAAM,CAACM,CAAD,CAAlB;AACA,iBAAKf,SAAL,CAAegB,KAAK,CAACC,IAArB;AACD;AACF,SALD,MAKO;AACL,eAAKjB,SAAL,CAAe,kBAAf;AACD;AACF,OAdD;AAeD,KA3F2B;;AAC1B,SAAKb,SAAL,GAAiBb,QAAjB;AACA,SAAKY,OAAL,GAAeb,MAAf,CAF0B,CAI1B;;AACA,SAAKgB,cAAL,GAAsB,CAAC,4DAAD,CAAtB,CAL0B,CAO1B;AACA;;AACA,SAAKE,MAAL,GAAc,gDAAd;AACA,SAAKR,IAAL,GAAaD,MAAM,CAACC,IAApB;AAIH;;;;;AAgBC;;;;uCAImBW,U,EAAY;AAC7B,UAAIA,UAAJ,EAAgB;AACdlB,QAAAA,eAAe,CAAC0C,KAAhB,CAAsBC,OAAtB,GAAgC,MAAhC;AACAxC,QAAAA,aAAa,CAACuC,KAAd,CAAoBC,OAApB,GAA8B,OAA9B;AACAb,QAAAA,UAAU;AACX,OAJD,MAIO;AACL9B,QAAAA,eAAe,CAAC0C,KAAhB,CAAsBC,OAAtB,GAAgC,OAAhC;AACAxC,QAAAA,aAAa,CAACuC,KAAd,CAAoBC,OAApB,GAA8B,MAA9B;AACD;AACF;AAED;;;;;;;;;AAiDN,eAAe/C,QAAf","sourcesContent":["class gmailAPI {\n    constructor(apiKey, clientId) {\n        this.CLIENT_ID = clientId;\n        this.API_KEY = apiKey;\n       \n        // Array of API discovery doc URLs for APIs used by the quickstart\n        this.DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/gmail/v1/rest\"];\n       \n        // Authorization scopes required by the API; multiple scopes can be\n        // included, separated by spaces.\n        this.SCOPES = 'https://www.googleapis.com/auth/gmail.readonly';\n        this.gapi =  window.gapi\n\n        \n\n    }\n    initClient = () => {\n        var authorizeButton = document.getElementById('authorize_button');\n        var signoutButton = document.getElementById('signout_button');\n        console.log(window.gapi)\n        window.gapi.client.init({\n          apiKey: this.API_KEY,\n          clientId: this.CLIENT_ID,\n          discoveryDocs: this.DISCOVERY_DOCS,\n          scope: this.SCOPES\n        })\n\n        this.gapi = window.gapi;\n        console.log(window.gapi.auth2.getAuthInstance().isSignedIn)\n      }\n\n      /**\n       *  Called when the signed in status changes, to update the UI\n       *  appropriately. After a sign-in, the API is called.\n       */\n      updateSigninStatus(isSignedIn) {\n        if (isSignedIn) {\n          authorizeButton.style.display = 'none';\n          signoutButton.style.display = 'block';\n          listLabels();\n        } else {\n          authorizeButton.style.display = 'block';\n          signoutButton.style.display = 'none';\n        }\n      }\n\n      /**\n       *  Sign in the user upon button click.\n       */\n      handleAuthClick = (event) => {\n        this.gapi.auth2.getAuthInstance().signIn();\n      }\n\n      /**\n       *  Sign out the user upon button click.\n       */\n      handleSignoutClick = (event) => {\n        this.gapi.auth2.getAuthInstance().signOut();\n      }\n\n      /**\n       * Append a pre element to the body containing the given message\n       * as its text node. Used to display the results of the API call.\n       *\n       * @param {string} message Text to be placed in pre element.\n       */\n      appendPre = (message) => {\n        var pre = document.getElementById('content');\n        var textContent = document.createTextNode(message + '\\n');\n        pre.appendChild(textContent);\n      }\n\n      /**\n       * Print all Labels in the authorized user's inbox. If no labels\n       * are found an appropriate message is printed.\n       */\n      listLabels = () => {\n        this.gapi.client.gmail.users.labels.list({\n          'userId': 'me'\n        }).then(function(response) {\n          var labels = response.result.labels;\n          this.appendPre('Labels:');\n\n          if (labels && labels.length > 0) {\n            for (let i = 0; i < labels.length; i++) {\n              var label = labels[i];\n              this.appendPre(label.name)\n            }\n          } else {\n            this.appendPre('No Labels found.');\n          }\n        });\n      }\n}\n\nexport default gmailAPI;\n\n    "]},"metadata":{},"sourceType":"module"}