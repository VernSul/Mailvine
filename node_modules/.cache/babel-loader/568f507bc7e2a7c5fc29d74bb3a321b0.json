{"ast":null,"code":"import _classCallCheck from \"/home/victor/Documents/dadTools/emailFinder/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\nvar gmailAPI = function gmailAPI(apiKey, clientId) {\n  var _this = this;\n\n  _classCallCheck(this, gmailAPI);\n\n  this.initClient = function () {\n    window.gapi.client.init({\n      apiKey: _this.API_KEY,\n      clientId: _this.CLIENT_ID,\n      discoveryDocs: _this.DISCOVERY_DOCS,\n      scope: _this.SCOPES\n    }).then(function () {\n      console.log(window.gapi);\n      console.log(this.gapi.auth2.getAuthInstance().isSignedIn);\n      this.gapi = gapi; //Listen for sign-in state changes.\n\n      gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus); // Handle the initial sign-in state.\n\n      updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\n      authorizeButton.onclick = handleAuthClick;\n      signoutButton.onclick = handleSignoutClick;\n    }, function (error) {//   appendPre(JSON.stringify(error, null, 2));\n    });\n  };\n\n  this.handleAuthClick = function (event) {\n    _this.gapi.auth2.getAuthInstance().signIn();\n  };\n\n  this.handleSignoutClick = function (event) {\n    _this.gapi.auth2.getAuthInstance().signOut();\n  };\n\n  this.appendPre = function (message) {\n    var pre = document.getElementById('content');\n    var textContent = document.createTextNode(message + '\\n');\n    pre.appendChild(textContent);\n  };\n\n  this.listLabels = function () {\n    _this.gapi.client.gmail.users.labels.list({\n      'userId': 'me'\n    }).then(function (response) {\n      var labels = response.result.labels;\n      this.appendPre('Labels:');\n\n      if (labels && labels.length > 0) {\n        for (var i = 0; i < labels.length; i++) {\n          var label = labels[i];\n          this.appendPre(label.name);\n        }\n      } else {\n        this.appendPre('No Labels found.');\n      }\n    });\n  };\n\n  this.CLIENT_ID = clientId;\n  this.API_KEY = apiKey; // Array of API discovery doc URLs for APIs used by the quickstart\n\n  this.DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/gmail/v1/rest\"]; // Authorization scopes required by the API; multiple scopes can be\n  // included, separated by spaces.\n\n  this.SCOPES = 'https://www.googleapis.com/auth/gmail.readonly';\n  this.gapi = window.gapi;\n};\n\nexport default gmailAPI;","map":{"version":3,"sources":["/home/victor/Documents/dadTools/emailFinder/src/google.js"],"names":["gmailAPI","apiKey","clientId","initClient","window","gapi","client","init","API_KEY","CLIENT_ID","discoveryDocs","DISCOVERY_DOCS","scope","SCOPES","then","console","log","auth2","getAuthInstance","isSignedIn","listen","updateSigninStatus","get","authorizeButton","onclick","handleAuthClick","signoutButton","handleSignoutClick","error","event","signIn","signOut","appendPre","message","pre","document","getElementById","textContent","createTextNode","appendChild","listLabels","gmail","users","labels","list","response","result","length","i","label","name"],"mappings":"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","sourcesContent":["class gmailAPI {\n    constructor(apiKey, clientId) {\n        this.CLIENT_ID = clientId;\n        this.API_KEY = apiKey;\n       \n        // Array of API discovery doc URLs for APIs used by the quickstart\n        this.DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/gmail/v1/rest\"];\n       \n        // Authorization scopes required by the API; multiple scopes can be\n        // included, separated by spaces.\n        this.SCOPES = 'https://www.googleapis.com/auth/gmail.readonly';\n        this.gapi =  window.gapi\n\n        \n\n    }\n    initClient = () => {\n        window.gapi.client.init({\n          apiKey: this.API_KEY,\n          clientId: this.CLIENT_ID,\n          discoveryDocs: this.DISCOVERY_DOCS,\n          scope: this.SCOPES\n        }).then(function () {\n            console.log(window.gapi)\n            console.log(this.gapi.auth2.getAuthInstance().isSignedIn)\n            this.gapi = gapi\n          //Listen for sign-in state changes.\n          gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);\n\n          // Handle the initial sign-in state.\n          updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\n          authorizeButton.onclick = handleAuthClick;\n          signoutButton.onclick = handleSignoutClick;\n        }, function(error) {\n        //   appendPre(JSON.stringify(error, null, 2));\n        });\n      }\n\n      /**\n       *  Called when the signed in status changes, to update the UI\n       *  appropriately. After a sign-in, the API is called.\n       */\n    //   updateSigninStatus(isSignedIn) {\n    //     if (isSignedIn) {\n    //       authorizeButton.style.display = 'none';\n    //       signoutButton.style.display = 'block';\n    //       listLabels();\n    //     } else {\n    //       authorizeButton.style.display = 'block';\n    //       signoutButton.style.display = 'none';\n    //     }\n    //   }\n\n      /**\n       *  Sign in the user upon button click.\n       */\n      handleAuthClick = (event) => {\n        this.gapi.auth2.getAuthInstance().signIn();\n      }\n\n      /**\n       *  Sign out the user upon button click.\n       */\n      handleSignoutClick = (event) => {\n        this.gapi.auth2.getAuthInstance().signOut();\n      }\n\n      /**\n       * Append a pre element to the body containing the given message\n       * as its text node. Used to display the results of the API call.\n       *\n       * @param {string} message Text to be placed in pre element.\n       */\n      appendPre = (message) => {\n        var pre = document.getElementById('content');\n        var textContent = document.createTextNode(message + '\\n');\n        pre.appendChild(textContent);\n      }\n\n      /**\n       * Print all Labels in the authorized user's inbox. If no labels\n       * are found an appropriate message is printed.\n       */\n      listLabels = () => {\n        this.gapi.client.gmail.users.labels.list({\n          'userId': 'me'\n        }).then(function(response) {\n          var labels = response.result.labels;\n          this.appendPre('Labels:');\n\n          if (labels && labels.length > 0) {\n            for (let i = 0; i < labels.length; i++) {\n              var label = labels[i];\n              this.appendPre(label.name)\n            }\n          } else {\n            this.appendPre('No Labels found.');\n          }\n        });\n      }\n}\n\nexport default gmailAPI;\n\n    "]},"metadata":{},"sourceType":"module"}