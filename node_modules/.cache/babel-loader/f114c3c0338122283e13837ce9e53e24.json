{"ast":null,"code":"import _classCallCheck from \"/home/victor/Documents/dadTools/emailFinder/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/victor/Documents/dadTools/emailFinder/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar gmailAPI =\n/*#__PURE__*/\nfunction () {\n  function gmailAPI(apiKey, clientId) {\n    var _this = this;\n\n    _classCallCheck(this, gmailAPI);\n\n    this.initClient = function () {\n      console.log(window);\n      window.gapi.client.init({\n        apiKey: _this.API_KEY,\n        clientId: _this.CLIENT_ID,\n        discoveryDocs: _this.DISCOVERY_DOCS,\n        scope: _this.SCOPES\n      }).then(function () {\n        console.log(this.gapi); // this.gapi = gapi\n        // Listen for sign-in state changes.\n        //   gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);\n        //   // Handle the initial sign-in state.\n        //   updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\n        //   authorizeButton.onclick = handleAuthClick;\n        //   signoutButton.onclick = handleSignoutClick;\n      }, function (error) {//   appendPre(JSON.stringify(error, null, 2));\n      });\n    };\n\n    this.handleAuthClick = function (event) {\n      _this.gapi.auth2.getAuthInstance().signIn();\n    };\n\n    this.handleSignoutClick = function (event) {\n      _this.gapi.auth2.getAuthInstance().signOut();\n    };\n\n    this.appendPre = function (message) {\n      var pre = document.getElementById('content');\n      var textContent = document.createTextNode(message + '\\n');\n      pre.appendChild(textContent);\n    };\n\n    this.CLIENT_ID = apiKey;\n    this.API_KEY = clientId; // Array of API discovery doc URLs for APIs used by the quickstart\n\n    this.DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/gmail/v1/rest\"]; // Authorization scopes required by the API; multiple scopes can be\n    // included, separated by spaces.\n\n    this.SCOPES = 'https://www.googleapis.com/auth/gmail.readonly';\n    this.gapi = window.gapi;\n  }\n\n  _createClass(gmailAPI, [{\n    key: \"listLabels\",\n\n    /**\n     * Print all Labels in the authorized user's inbox. If no labels\n     * are found an appropriate message is printed.\n     */\n    value: function listLabels() {\n      this.gapi.client.gmail.users.labels.list({\n        'userId': 'me'\n      }).then(function (response) {\n        var labels = response.result.labels;\n        this.appendPre('Labels:');\n\n        if (labels && labels.length > 0) {\n          for (var i = 0; i < labels.length; i++) {\n            var label = labels[i];\n            this.appendPre(label.name);\n          }\n        } else {\n          this.appendPre('No Labels found.');\n        }\n      });\n    }\n  }]);\n\n  return gmailAPI;\n}();\n\nexport default gmailAPI;","map":{"version":3,"sources":["/home/victor/Documents/dadTools/emailFinder/src/google.js"],"names":["gmailAPI","apiKey","clientId","initClient","console","log","window","gapi","client","init","API_KEY","CLIENT_ID","discoveryDocs","DISCOVERY_DOCS","scope","SCOPES","then","error","handleAuthClick","event","auth2","getAuthInstance","signIn","handleSignoutClick","signOut","appendPre","message","pre","document","getElementById","textContent","createTextNode","appendChild","gmail","users","labels","list","response","result","length","i","label","name"],"mappings":";;;IAAMA,Q;;;AACF,oBAAYC,MAAZ,EAAoBC,QAApB,EAA8B;AAAA;;AAAA;;AAAA,SAe9BC,UAf8B,GAejB,YAAM;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAYC,MAAZ;AACAA,MAAAA,MAAM,CAACC,IAAP,CAAYC,MAAZ,CAAmBC,IAAnB,CAAwB;AACtBR,QAAAA,MAAM,EAAE,KAAI,CAACS,OADS;AAEtBR,QAAAA,QAAQ,EAAE,KAAI,CAACS,SAFO;AAGtBC,QAAAA,aAAa,EAAE,KAAI,CAACC,cAHE;AAItBC,QAAAA,KAAK,EAAE,KAAI,CAACC;AAJU,OAAxB,EAKGC,IALH,CAKQ,YAAY;AAChBZ,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKE,IAAjB,EADgB,CAEhB;AACF;AACF;AAEA;AACA;AACA;AACA;AACC,OAfD,EAeG,UAASU,KAAT,EAAgB,CACnB;AACC,OAjBD;AAkBD,KAnC2B;;AAAA,SAuD5BC,eAvD4B,GAuDV,UAACC,KAAD,EAAW;AAC3B,MAAA,KAAI,CAACZ,IAAL,CAAUa,KAAV,CAAgBC,eAAhB,GAAkCC,MAAlC;AACD,KAzD2B;;AAAA,SA8D5BC,kBA9D4B,GA8DP,UAACJ,KAAD,EAAW;AAC9B,MAAA,KAAI,CAACZ,IAAL,CAAUa,KAAV,CAAgBC,eAAhB,GAAkCG,OAAlC;AACD,KAhE2B;;AAAA,SAwE5BC,SAxE4B,GAwEhB,UAACC,OAAD,EAAa;AACvB,UAAIC,GAAG,GAAGC,QAAQ,CAACC,cAAT,CAAwB,SAAxB,CAAV;AACA,UAAIC,WAAW,GAAGF,QAAQ,CAACG,cAAT,CAAwBL,OAAO,GAAG,IAAlC,CAAlB;AACAC,MAAAA,GAAG,CAACK,WAAJ,CAAgBF,WAAhB;AACD,KA5E2B;;AAC1B,SAAKnB,SAAL,GAAiBV,MAAjB;AACA,SAAKS,OAAL,GAAeR,QAAf,CAF0B,CAI1B;;AACA,SAAKW,cAAL,GAAsB,CAAC,4DAAD,CAAtB,CAL0B,CAO1B;AACA;;AACA,SAAKE,MAAL,GAAc,gDAAd;AACA,SAAKR,IAAL,GAAaD,MAAM,CAACC,IAApB;AAIH;;;;;AAgEC;;;;iCAIa;AACX,WAAKA,IAAL,CAAUC,MAAV,CAAiByB,KAAjB,CAAuBC,KAAvB,CAA6BC,MAA7B,CAAoCC,IAApC,CAAyC;AACvC,kBAAU;AAD6B,OAAzC,EAEGpB,IAFH,CAEQ,UAASqB,QAAT,EAAmB;AACzB,YAAIF,MAAM,GAAGE,QAAQ,CAACC,MAAT,CAAgBH,MAA7B;AACA,aAAKV,SAAL,CAAe,SAAf;;AAEA,YAAIU,MAAM,IAAIA,MAAM,CAACI,MAAP,GAAgB,CAA9B,EAAiC;AAC/B,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,MAAM,CAACI,MAA3B,EAAmCC,CAAC,EAApC,EAAwC;AACtC,gBAAIC,KAAK,GAAGN,MAAM,CAACK,CAAD,CAAlB;AACA,iBAAKf,SAAL,CAAegB,KAAK,CAACC,IAArB;AACD;AACF,SALD,MAKO;AACL,eAAKjB,SAAL,CAAe,kBAAf;AACD;AACF,OAdD;AAeD;;;;;;AAGP,eAAezB,QAAf","sourcesContent":["class gmailAPI {\n    constructor(apiKey, clientId) {\n        this.CLIENT_ID = apiKey;\n        this.API_KEY = clientId;\n       \n        // Array of API discovery doc URLs for APIs used by the quickstart\n        this.DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/gmail/v1/rest\"];\n       \n        // Authorization scopes required by the API; multiple scopes can be\n        // included, separated by spaces.\n        this.SCOPES = 'https://www.googleapis.com/auth/gmail.readonly';\n        this.gapi =  window.gapi\n\n        \n\n    }\n    initClient = () => {\n        console.log(window)\n        window.gapi.client.init({\n          apiKey: this.API_KEY,\n          clientId: this.CLIENT_ID,\n          discoveryDocs: this.DISCOVERY_DOCS,\n          scope: this.SCOPES\n        }).then(function () {\n            console.log(this.gapi)\n            // this.gapi = gapi\n          // Listen for sign-in state changes.\n        //   gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);\n\n        //   // Handle the initial sign-in state.\n        //   updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\n        //   authorizeButton.onclick = handleAuthClick;\n        //   signoutButton.onclick = handleSignoutClick;\n        }, function(error) {\n        //   appendPre(JSON.stringify(error, null, 2));\n        });\n      }\n\n      /**\n       *  Called when the signed in status changes, to update the UI\n       *  appropriately. After a sign-in, the API is called.\n       */\n    //   updateSigninStatus(isSignedIn) {\n    //     if (isSignedIn) {\n    //       authorizeButton.style.display = 'none';\n    //       signoutButton.style.display = 'block';\n    //       listLabels();\n    //     } else {\n    //       authorizeButton.style.display = 'block';\n    //       signoutButton.style.display = 'none';\n    //     }\n    //   }\n\n      /**\n       *  Sign in the user upon button click.\n       */\n      handleAuthClick = (event) => {\n        this.gapi.auth2.getAuthInstance().signIn();\n      }\n\n      /**\n       *  Sign out the user upon button click.\n       */\n      handleSignoutClick = (event) => {\n        this.gapi.auth2.getAuthInstance().signOut();\n      }\n\n      /**\n       * Append a pre element to the body containing the given message\n       * as its text node. Used to display the results of the API call.\n       *\n       * @param {string} message Text to be placed in pre element.\n       */\n      appendPre = (message) => {\n        var pre = document.getElementById('content');\n        var textContent = document.createTextNode(message + '\\n');\n        pre.appendChild(textContent);\n      }\n\n      /**\n       * Print all Labels in the authorized user's inbox. If no labels\n       * are found an appropriate message is printed.\n       */\n      listLabels() {\n        this.gapi.client.gmail.users.labels.list({\n          'userId': 'me'\n        }).then(function(response) {\n          var labels = response.result.labels;\n          this.appendPre('Labels:');\n\n          if (labels && labels.length > 0) {\n            for (let i = 0; i < labels.length; i++) {\n              var label = labels[i];\n              this.appendPre(label.name)\n            }\n          } else {\n            this.appendPre('No Labels found.');\n          }\n        });\n      }\n}\n\nexport default gmailAPI;\n\n    "]},"metadata":{},"sourceType":"module"}